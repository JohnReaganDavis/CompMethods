function [root, iterations] = false_position(f, a, b, tol, max_iter)
% False position method to find the root of a function.
%
% Input:
%   f        - Function handle for the function
%   a, b     - Interval [a, b] in which to search for the root
%   tol      - Tolerance for stopping criterion
%   max_iter - Maximum number of iterations
%
% Output:
%   root       - Approximated root of the function
%   iterations - Number of iterations taken

    if f(a) * f(b) > 0
        error('f(a) and f(b) must have different signs.');
    end

    iterations = 0;
    while iterations < max_iter
        % Compute the root using the false position formula
        c = b - f(b) * (b - a) / (f(b) - f(a));
        
        % Check for convergence
        if abs(f(c)) < tol
            root = c;
            return;
        end
        
        % Update the interval
        if f(a) * f(c) < 0
            b = c;
        else
            a = c;
        end
        
        iterations = iterations + 1;
    end

    % If maximum iterations reached without convergence
    warning('False position method did not converge after %d iterations.', max_iter);
    root = c;
end

-------------------------example-------------------------------------------
f = @(x) x^2 - 2;

% Interval [a, b]
a = 1;
b = 2;

% Tolerance and maximum iterations
tol = 1e-6;
max_iter = 1000;

[root, iterations] = false_position(f, a, b, tol, max_iter);

fprintf('Root: %f, Iterations: %d\n', root, iterations);
